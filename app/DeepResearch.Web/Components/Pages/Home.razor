@page "/"
@using DeepResearch.Core.Events
@using DeepResearch.Web.Services
@using DeepResearch.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@inject WebResearchService ResearchService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Deep Research</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-semibold text-gray-900">Deep Research</h1>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Research Input Form -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-4">調査トピックを入力してください</h2>
            <div class="flex space-x-4">
                <input @bind="researchTopic" @onkeypress="OnKeyPress" placeholder="例: AIによる医療画像診断の最新動向"
                    class="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    disabled="@isResearching" />
                <button @onclick="StartResearch" disabled="@(isResearching || string.IsNullOrWhiteSpace(researchTopic))"
                    class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                    @if (isResearching)
                    {
                        <span class="flex items-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg"
                                fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                                </circle>
                                <path class="opacity-75" fill="currentColor"
                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                </path>
                            </svg>
                            調査中...
                        </span>
                    }
                    else
                    {
                        <span>調査開始</span>
                    }
                </button>
            </div>
        </div>

        <!-- Progress Display -->
        @if (isResearching || researchSteps.Any())
        {
            <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
                <h3 class="text-xl font-semibold text-gray-900 mb-4">調査進行状況</h3>
                <div class="space-y-4">
                    @foreach (var step in researchSteps)
                    {
                        <div class="border-l-4 @(GetStepBorderColor(step.Type)) pl-4 py-2">
                            <div class="flex items-center mb-2">
                                <span class="@(GetStepIconColor(step.Type)) mr-2">@GetStepIcon(step.Type)</span>
                                <h4 class="font-medium text-gray-900">@GetStepTitle(step.Type)</h4>
                                <span class="ml-auto text-sm text-gray-500">@step.Timestamp.ToString("HH:mm:ss")</span>
                            </div>
                            @if (!string.IsNullOrEmpty(step.Content))
                            {
                                <div class="text-gray-700 text-sm mt-2">
                                    @((MarkupString)step.Content)
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Final Research Report -->
        @if (!string.IsNullOrEmpty(finalReport))
        {
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-2xl font-semibold text-gray-900 mb-4">調査レポート</h3>
                <div class="prose max-w-none">
                    @((MarkupString)finalReport)
                </div>
            </div>
        }
    </main>
</div>

@code {
    private string researchTopic = "";
    private bool isResearching = false;
    private List<ResearchStep> researchSteps = new();
    private string finalReport = "";
    private string clientId = Guid.NewGuid().ToString();
    private HubConnection? hubConnection;

    public class ResearchStep
    {
        public string Type { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/researchHub"))
        .Build();

        hubConnection.On<object>("ReceiveProgress", (message) =>
        {
            InvokeAsync(() => HandleProgressUpdate(message));
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", clientId);
    }

    private async Task StartResearch()
    {
        if (string.IsNullOrWhiteSpace(researchTopic) || isResearching)
            return;

        isResearching = true;
        researchSteps.Clear();
        finalReport = "";
        StateHasChanged();

        try
        {
            await ResearchService.StartResearchAsync(researchTopic, clientId);
        }
        catch (Exception ex)
        {
            researchSteps.Add(new ResearchStep
            {
                Type = "error",
                Content = $"エラーが発生しました: {ex.Message}"
            });
        }
        finally
        {
            isResearching = false;
            StateHasChanged();
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isResearching && !string.IsNullOrWhiteSpace(researchTopic))
        {
            await StartResearch();
        }
    }

    private Task HandleProgressUpdate(object message)
    {
        var json = System.Text.Json.JsonSerializer.Serialize(message);
        var doc = System.Text.Json.JsonDocument.Parse(json);
        var root = doc.RootElement;

        var type = root.GetProperty("type").GetString() ?? "";
        var data = root.GetProperty("data");

        var content = "";

        switch (type)
        {
            case ProgressTypes.Thinking:
                content = data.GetProperty("message").GetString() ?? "";
                break;
            case ProgressTypes.GenerateQuery:
                var query = data.GetProperty("query").GetString() ?? "";
                var rationale = data.GetProperty("rationale").GetString() ?? "";
                content = $"<strong>検索クエリ:</strong> {query}<br><strong>根拠:</strong> {rationale}";
                break;
            case ProgressTypes.Routing:
                content = $"<strong>次の処理を判断中</strong>";
                break;
            case ProgressTypes.WebResearch:
                if (data.TryGetProperty("sources", out var sources))
                {
                    content = $"<strong>検索結果:</strong> {sources.GetArrayLength()} 件のソースを発見";
                }
                break;
            case ProgressTypes.Summarize:
                if (data.TryGetProperty("summary", out var summary))
                {
                    content = $"<strong>要約:</strong><br>{summary.GetString()}";
                }
                break;
            case ProgressTypes.Reflection:
                if (data.TryGetProperty("knowledge_gap", out var gap))
                {
                    content = $"<strong>知識ギャップ:</strong> {gap.GetString()}";
                }
                break;
            case ProgressTypes.Finalize:
                if (data.TryGetProperty("summary", out var finalSummary))
                {
                    finalReport = finalSummary.GetString() ?? "";
                }
                StateHasChanged();
                return Task.CompletedTask;
            case ProgressTypes.ResearchComplete:
                if (data.TryGetProperty("final_summary", out var completeSummary))
                {
                    finalReport = completeSummary.GetString() ?? "";
                }
                content = "<strong>調査が完了しました！</strong>";
                break;
        }

        if (!string.IsNullOrEmpty(content) || type == ProgressTypes.ResearchComplete)
        {
            researchSteps.Add(new ResearchStep { Type = type, Content = content });
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private string GetStepBorderColor(string type) => type switch
    {
        ProgressTypes.Thinking => "border-yellow-400",
        ProgressTypes.GenerateQuery => "border-blue-400",
        ProgressTypes.WebResearch => "border-purple-400",
        ProgressTypes.Summarize => "border-green-400",
        ProgressTypes.Reflection => "border-orange-400",
        ProgressTypes.Finalize => "border-indigo-400",
        ProgressTypes.ResearchComplete => "border-green-500",
        "error" => "border-red-400",
        _ => "border-gray-400"
    };

    private string GetStepIconColor(string type) => type switch
    {
        ProgressTypes.Thinking => "text-yellow-500",
        ProgressTypes.GenerateQuery => "text-blue-500",
        ProgressTypes.Routing => "text-gray-500",
        ProgressTypes.WebResearch => "text-purple-500",
        ProgressTypes.Summarize => "text-green-500",
        ProgressTypes.Reflection => "text-orange-500",
        ProgressTypes.Finalize => "text-indigo-500",
        ProgressTypes.ResearchComplete => "text-green-600",
        "error" => "text-red-500",
        _ => "text-gray-500"
    };

    private string GetStepIcon(string type) => type switch
    {
        ProgressTypes.Thinking => "💭",
        ProgressTypes.GenerateQuery => "🔍",
        ProgressTypes.Routing => "🔀",
        ProgressTypes.WebResearch => "🌐",
        ProgressTypes.Summarize => "📝",
        ProgressTypes.Reflection => "🤔",
        ProgressTypes.Finalize => "📋",
        ProgressTypes.ResearchComplete => "✅",
        "error" => "❌",
        _ => "📄"
    };

    private string GetStepTitle(string type) => type switch
    {
        ProgressTypes.Thinking => "思考中",
        ProgressTypes.GenerateQuery => "検索クエリ生成",
        ProgressTypes.Routing => "処理のルーティング",
        ProgressTypes.WebResearch => "Web検索",
        ProgressTypes.Summarize => "要約作成",
        ProgressTypes.Reflection => "反省・知識ギャップ分析",
        ProgressTypes.Finalize => "最終レポート作成",
        ProgressTypes.ResearchComplete => "調査完了",
        "error" => "エラー",
        _ => "処理中"
    };

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

@inject NavigationManager Navigation
