{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "7767664234637951102"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "openAiResourceGroupLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]",
      "metadata": {
        "description": "Location for the OpenAI resource group"
      }
    },
    "openAiResourceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the OpenAI resource"
      }
    },
    "openAiSkuName": {
      "type": "string",
      "defaultValue": "S0",
      "metadata": {
        "description": "SKU for the OpenAI resource"
      }
    },
    "openAiModelDeployments": {
      "type": "array",
      "defaultValue": [
        {
          "name": "gpt-4o-mini",
          "model": {
            "format": "OpenAI",
            "name": "gpt-4o-mini",
            "version": "2024-07-18"
          },
          "sku": {
            "name": "GlobalStandard",
            "capacity": 10
          }
        }
      ],
      "metadata": {
        "description": "Model deployments to create"
      }
    },
    "tavilyApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "API key for Tavily search service"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridEventSubscriptions": "evgs-",
      "eventGridTopics": "evgt-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "loadTesting": "lt-",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancers": "lb-",
      "networkLoadBalancersInbound": "lbi-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersOutbound": "lbo-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersFirewallRules": "sqlfw-",
      "sqlServersVulnerabilityAssessments": "sqlva-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').webServerFarms, variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "B1",
              "capacity": 1
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "11465412668513159281"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "F1"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "reserved": false
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "web",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}web-{1}', variables('abbrs').webSitesAppService, variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "runtimeName": {
            "value": "dotnet"
          },
          "appSettings": {
            "value": {
              "OpenAI__Endpoint": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value]",
              "OpenAI__DeploymentName": "[parameters('openAiModelDeployments')[0].name]",
              "Tavily__ApiKey": "[parameters('tavilyApiKey')]"
            }
          },
          "managedIdentity": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "13756124895419130598"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "appServicePlanId": {
              "type": "string"
            },
            "managedIdentity": {
              "type": "bool",
              "defaultValue": false
            },
            "runtimeName": {
              "type": "string"
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[if(parameters('managedIdentity'), createObject('type', 'SystemAssigned'), createObject('type', 'None'))]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "copy": [
                    {
                      "name": "appSettings",
                      "count": "[length(items(parameters('appSettings')))]",
                      "input": {
                        "name": "[items(parameters('appSettings'))[copyIndex('appSettings')].key]",
                        "value": "[items(parameters('appSettings'))[copyIndex('appSettings')].value]"
                      }
                    }
                  ],
                  "netFrameworkVersion": "[if(equals(parameters('runtimeName'), 'dotnet'), 'v8.0', null())]"
                },
                "httpsOnly": true
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01').defaultHostName)]"
            },
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(parameters('managedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'openai')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('openAiResourceName'))), createObject('value', parameters('openAiResourceName')), createObject('value', format('{0}{1}', variables('abbrs').cognitiveServicesAccounts, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('openAiResourceGroupLocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "[parameters('openAiSkuName')]"
            }
          },
          "deployments": {
            "value": "[parameters('openAiModelDeployments')]"
          },
          "customSubDomainName": {
            "value": "[format('{0}{1}', variables('abbrs').cognitiveServicesAccounts, variables('resourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "15134492870739895761"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]"
            },
            "deployments": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                }
              },
              "sku": "[parameters('sku')]"
            },
            {
              "copy": {
                "name": "deployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[parameters('deployments')[copyIndex()].model]",
                "raiPolicyName": "[tryGet(parameters('deployments')[copyIndex()], 'raiPolicyName')]"
              },
              "sku": "[coalesce(tryGet(parameters('deployments')[copyIndex()], 'sku'), createObject('name', 'Standard', 'capacity', 20))]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-web",
      "resourceGroup": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "1914775556936479682"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "roleDefinitionId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'web')]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value]"
    },
    "AZURE_OPENAI_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[parameters('openAiModelDeployments')[0].name]"
    },
    "SERVICE_WEB_IDENTITY_PRINCIPAL_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.identityPrincipalId.value]"
    },
    "SERVICE_WEB_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.name.value]"
    },
    "SERVICE_WEB_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.uri.value]"
    }
  }
}